#!/bin/bash

# Specify exta option for ceph like the username/keyring/etc. Can also be done with CEPH_ARGS global variable
#CEPH_ARG="-n client.username"
CEPH_BIN=$(which ceph 2> /dev/null)
JQ_BIN=$(which jq 2> /dev/null)

function check_requirements()
{
  if $CEPH_BIN -v &> /dev/null; then
    CEPH="$CEPH_BIN $CEPH_ARG"
  else
    echo "ERROR: Ceph binary not found, please check you have ceph client installed and avaiable in your path"
    return 1
  fi

   if ! $CEPH -s &> /dev/null; then
    echo "ERROR: Cannot connect to cluster, please check your username permissions"
    echo "ERROT: Command $CEPH -s failed"
    return 1
  fi
 
 if $JQ_BIN --version &> /dev/null; then
    JQ="$JQ_BIN -M --raw-output"
  else
    echo "ERROR: JQ binary not found, please check you have jq installed and avaiable in your path"
    return 1
  fi
}


function find_host_from_pg() {

local PGID=$1
echo "PG $PGID has been found at (first is primary) : "

for osd in $(ceph pg $PGID  query | $JQ -cr .up[]); do
	echo -n "OSD:osd.$osd | Host : "
	$CEPH osd find $osd --format json 2> /dev/null | $JQ .crush_location.host
done
}

function find_host_from_object() {
  local OBJID=$1
  local PGID=$($CEPH osd map rbd $OBJID --format json 2> /dev/null | $JQ -cr .pgid)
  echo $OBJID found into PG $PGID 
  find_host_from_pg $PGID
}

function find_prim_pg_from_osd() {
  local POSD=$1
  echo "INFO: Looking for primary PGs beloging to OSD $POSD"
  $CEPH pg dump --format json 2>/dev/null | $JQ --argjson posd $POSD '.pg_stats[] | select(.acting_primary==$posd).pgid'
}

function find_all_pg_from_osd() {
  local OSD=$1
  echo "INFO: Looking for all PGs mapped to OSD $OSD"
  ceph pg dump --forma json &> /dev/null | $JQ -M --argjson osd $OSD '.pg_stats[] | select(.up[]==$osd).pgid'
}

function get_rbd_prefix() {

  local POOL=$1
  local RBD=$2
  
  local PREFIX=$(rbd --image $RBD -p $POOL info --format json 2> /dev/null | jq --raw-output .block_name_prefix)
  if [ -z $rbd_prefix ]; then
    echo "ERROR: Unable to find RBD Prefix for image $pool/$rbd"
    exit 1
  else
    echo $PREFIX
  fi

}


function count_rbd_object() {

  local POOL=$1
  local RBD=$2
  local RBD_PREFIX=$(get_rbd_prefix $POOL $RBD)

  echo "INFO: RBD image $POOL/RBD has prefix $PREFIX; now couning objects..."

  local RBD_OBJ=$(rados -p $POOL ls | grep $RBD_PREFIX | wc -l)

  echo "INFO: RBD image $POOL/RBD has $RBD_OBJ objects"
}


#
#  Find primary storage host for a given RBD image
#
function find_prim_host_from_rbd() {

  local pool=$1
  local rbd=$2
  local osd="null"

  local osdmap_t=$(mktemp)
  local osdtree_t=$(mktemp)
  local rbd_prefix=$(get_rbd_prefix $pool $rbd)

  echo "INFO: RBD image $pool/$rbd has prefix $rbd_prefix; now finding primary host..."

  echo "INFO: Dumping OSD map to $osdmap_t"
  if ! ceph osd getmap > $osdmap_t; then
    echo "ERROR: failed to retrieve osd map"
    exit 1
  fi
  echo "INFO: Dumping OSD tree to $osdtree_t"

  if ! ceph osd tree --format json > $osdtree_t; then
    echo "ERROR: failed to retrieve osd tree"
    exit 1
  fi

 echo

  for obj in $(rados -p $pool ls | grep $rbd_prefix);
    do
# Mapping object to osd. osdmaptoo does not support json output so using dirty sed.
      osd=$(osdmaptool  --test-map-object $obj $osdmap_t 2>/dev/null | sed -r 's/.*\[([[:digit:]]+),.*/\1/' | grep -v osdmaptool)
# Mapping osd to host
      $JQ --argjson osd $osd  '.nodes[] | select(.type=="host") | select(.children[] == $osd).name' $osdtree_t
  done | sort -u

# Cleaning files
  rm -f $osdtree_t $osdmap_t

}

# Check if all requirements are met
check_requirements || exit 1

#find_host_from_pg 0.1c

#find_host_from_object rb.0.376d.2ae8944a.000000000016

#find_pg $(ceph osd map rbd rb.0.376d.2ae8944a.000000000016 --format json | jq -cr .pgid)


#find_prim_pg_from_osd 1

#find_all_pg_from_osd 1

#get_rbd_prefix rbd myrbd

#count_rbd_object rbd myrbd

find_prim_host_from_rbd rbd myrbd