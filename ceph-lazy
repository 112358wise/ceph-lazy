#!/bin/bash

# Specify exta option for ceph like the username/keyring/etc. Can also be done with CEPH_ARGS global variable
#CEPH_OPT="-n client.username"


#
#  Print info message to stderr
#
function echoinfo() {
  printf "INFO: %s\n" "$*" >&2;
}


#
#  Print error message to stderr
#
function echoerr() {
  printf "ERROR: %s\n" "$*" >&2;
}


function help() {
  >&2 echo "Usage : ceph-lazy [-d | -h] [command] [parameters]
    
Ceph complex quering tool

OPTIONS
========
    -d          Activate debug mode
    -h          Print help

COMMANDS
=========

    Placement groups
    -----------------
    pg-get-host       pgid                          Find PG storage hosts (first is primary) 
    pg-most-write                                   Find most written PG (nb operations)
    pg-less-write                                   Find less written PG (nb operations)
    pg-most-write-kb                                Find most written PG (data written)
    pg-less-write-kb                                Find less written PG (data written)
    pg-most-read                                    Find most read PG (nb operations)
    pg-less-read                                    Find less read PG (nb operations)
    pg-most-read-kb                                 Find most read PG (data read)
    pg-less-read-kb                                 Find less read PG (data read)

    RBD
    ----
    rbd-prefix        pool_name image_name          Return RBD image prefix
    rbd-count         pool_name image_name          Count number of objects in a RBD image
    rbd-host          pool_name image_name          Find RBD primary storage hosts

    OSD
    ----
    osd-most-used                                   Show the most used OSD (capacity)
    osd-less-used                                   Show the less used OSD (capacity)
    osd-get-ppg       pgid                          Show all primaries PGS hosted on a OSD
    osd-get-ppg       pgid                          Show all PGS hosted on a OSD

    Objects
    --------
    object-get-host   object_id                     Find object storage hosts (first is primary)
  " 

}

#
#  Check dependencies
#
function check_requirements()
{

  # List of command dependencies
  local bin_dep="ceph rados rbd osdmaptool jq"

  for cmd in $bin_dep; do
    [ $DEBUG -eq 1 ] && echoinfo "Checking for $cmd..."
    $cmd --version  >/dev/null 2>&1 || { echoerr "ERROR: $cmd cannot be found... Aborting."; return 1; }
  done

  CEPH="ceph $CEPH_OPT"

  [ $DEBUG -eq 1 ] && echoinfo "Checking Ceph connectivity & basic permissions..."

  if ! $CEPH -s &> /dev/null; then
    echoerr "Cannot connect to cluster, please check your username & permissions"
    echoerr "Command $CEPH -s failed"
    return 1
  fi

    JQ="jq -M --raw-output"
}

#
#  Print the host that hosts a specific PG
#
function find_host_from_pg() {

  if [ $# -eq 1 ]; then
    local PGID=$1
  else
    echoerr "This command requires one argument"
    help
    exit 1
  fi

  [ $DEBUG -eq 1 ] && echoinfo "PG $PGID has been found at (first is primary) : "

  for osd in $($CEPH pg $PGID  query | $JQ -cr .up[]); do
  	echo -n "OSD:osd.$osd | Host:"
  	$CEPH osd find $osd --format json 2> /dev/null | $JQ .crush_location.host
  done
}


#
#  Print the host that hosts a specific object
#
function find_host_from_object() {
  local OBJID=$1
  local PGID=$($CEPH osd map rbd $OBJID --format json 2> /dev/null | $JQ -cr .pgid)
  [ $DEBUG -eq 1 ] && echoinfo $OBJID found into PG $PGID 
  find_host_from_pg $PGID
}


#
#  Print all primary pgs hosted by an OSD
#
function find_prim_pg_from_osd() {
  local POSD=$1
  [ $DEBUG -eq 1 ] && echoinfo "INFO: Looking for primary PGs beloging to OSD $POSD"
  $CEPH pg dump --format json 2>/dev/null | $JQ --argjson posd $POSD '.pg_stats[] | select(.acting_primary==$posd).pgid'
}


#
#  Print all pgs (primay & secondary) hosted by an OSD
#
function find_all_pg_from_osd() {
  local osd=$1
  [ $DEBUG -eq 1 ] && echoinfo "INFO: Looking for all PGs mapped to OSD $osd"
  $CEPH pg dump --forma json &> /dev/null | $JQ -M --argjson osd $osd '.pg_stats[] | select(.up[]==$osd).pgid'
}


#
#  Return RBD prefix from image name
#
function get_rbd_prefix() {

  if [ $# -eq 2 ]; then
    local pool=$1
    local rbd=$2
  else
    echoerr "This command requires two arguments"
    help
    exit 1
  fi
  
  local prefix=$(rbd --image $rbd -p $pool info --format json 2> /dev/null | jq --raw-output .block_name_prefix)
  if [ -z $prefix ]; then
    echoerr "Unable to find RBD Prefix for image $pool/$rbd"
    exit 1
  else
    echo $prefix
  fi

}


#
#  Count number of object in a RBD image
#
function count_rbd_object() {

  if [ $# -eq 2 ]; then
    local pool=$1
    local rbd=$2
  else
    echoerr "This command requires two arguments"
    help
    exit 1
  fi

  local rbd_prefix=$(get_rbd_prefix $pool $rbd)

  [ $DEBUG -eq 1 ] && echoinfo "RBD image $pool/$rbd has prefix $rbd_prefix; now couning objects..."

  local nb_obj=$(rados -p $pool ls | grep $RBD_PREFIX | wc -l)

  [ $DEBUG -eq 1 ] && echoinfo "RBD image $pool/$rbd has $nb_obj objects"
  echo $nb_obj
}


#
#  Find primary storage host for a given RBD image
#
function find_prim_host_from_rbd() {

 if [ $# -eq 2 ]; then
    local pool=$1
    local rbd=$2
  else
    echoerr "This command requires two arguments"
    help
    exit 1
  fi

  local osd="null"
  local osdmap_t=$(mktemp)
  local osdtree_t=$(mktemp)
  # Get RBD image prefix
  local rbd_prefix=$(get_rbd_prefix $pool $rbd)

  [ $DEBUG -eq 1 ] && echoinfo "RBD image $pool/$rbd has prefix $rbd_prefix; now finding primary host..."

  [ $DEBUG -eq 1 ] && echoinfo "Dumping OSD map to $osdmap_t"
  if ! $CEPH osd getmap > $osdmap_t; then
    echoerr "Failed to retrieve OSD map"
    exit 1
  fi

  [ $DEBUG -eq 1 ] && echoinfo "INFO: Dumping OSD tree to $osdtree_t"

  if ! $CEPH osd tree --format json > $osdtree_t; then
    echoerr "Failed to retrieve OSD tree"
    exit 1
  fi

# For each object in the RBD image
  for obj in $(rados -p $pool ls | grep $rbd_prefix);
    do
# Map object to osd. osdmaptoo does not support json output so using dirty sed.
      osd=$(osdmaptool  --test-map-object $obj $osdmap_t 2>/dev/null | sed -r 's/.*\[([[:digit:]]+),.*/\1/' | grep -v osdmaptool)
# Map osd to host
      $JQ --argjson osd $osd  '.nodes[] | select(.type=="host") | select(.children[] == $osd).name' $osdtree_t
  done | sort -u

# Cleaning files
  rm -f $osdtree_t $osdmap_t
}

#
#  Find most used (space) OSD
#
function find_most_used_osd() {

  local osd=$($CEPH pg dump --format json 2> /dev/null| $JQ '.osd_stats | max_by(.kb_used) | .osd')
  local host=$($CEPH osd find $osd 2> /dev/null | $JQ .crush_location.host)

  echo "OSD:osd.${osd} | host:$host"
}


#
#  Find less used (space) OSD
#
function find_less_used_osd() {

  local osd=$($CEPH pg dump --format json 2> /dev/null| $JQ '.osd_stats | min_by(.kb_used) | .osd')
  local host=$($CEPH osd find $osd 2> /dev/null | $JQ .crush_location.host)

  echo "OSD:osd.${osd} | host:$host"
}


#
#  Find less write (data) pg
#
function find_less_write_kb_pg() {

  local pgid=$($CEPH pg dump --format json 2> /dev/null| $JQ '.pg_stats | min_by(.stat_sum.num_write_kb).pgid')
  local osd=$($CEPH pg $pgid  query --format json | $JQ -cr .info.stats.up_primary)
  local host=$($CEPH osd find $osd --format json 2> /dev/null | $JQ .crush_location.host)

  echo "PG:$pgid | OSD:osd.$osd | Host:$host"
}


#
#  Find most read (data) pg
#
function find_most_write_kb_pg() {

  local pgid=$($CEPH pg dump --format json 2> /dev/null| $JQ '.pg_stats | max_by(.stat_sum.num_write_kb).pgid')
  local osd=$($CEPH pg $pgid  query --format json | $JQ -cr .info.stats.up_primary)
  local host=$($CEPH osd find $osd --format json 2> /dev/null | $JQ .crush_location.host)

  echo "PG:$pgid | OSD:osd.$osd | Host:$host"
}


#
#  Find less write (operations) pg
#
function find_less_write_pg() {

  local pgid=$($CEPH pg dump --format json 2> /dev/null| $JQ '.pg_stats | min_by(.stat_sum.num_write).pgid')
  local osd=$($CEPH pg $pgid query --format json | $JQ -cr .info.stats.up_primary)
  local host=$($CEPH osd find $osd --format json 2> /dev/null | $JQ .crush_location.host)

  echo "PG:$pgid | OSD:osd.$osd | Host:$host"
}


#
#  Find most read (operations) pg
#
function find_most_write_pg() {

  local pgid=$($CEPH pg dump --format json 2> /dev/null| $JQ '.pg_stats | max_by(.stat_sum.num_write).pgid')
  local osd=$($CEPH pg $pgid  query --format json | $JQ -cr .info.stats.up_primary)
  local host=$($CEPH osd find $osd --format json 2> /dev/null | $JQ .crush_location.host)

  echo "PG:$pgid | OSD:osd.$osd | Host:$host"
}

# Print help if no argument is given
if [ $# -eq 0 ]; then
  help
  exit 1
fi

# Activate debug mode if -d is specified
if [ "$1" = "-d" ]; then
  echoinfo "Debug mode activated"
  DEBUG=1
  shift
else
  DEBUG=0
fi


# Check if all requirements are met
check_requirements || exit 1


# Call proper function
case $1 in
  "-h")
    help
    exit 0
    ;;
  "pg-get-host")
    find_host_from_pg $2
    ;;
  "pg-most-write")
    find_most_write_pg
    ;;
  "pg-less-write")
    find_less_write_pg
    ;;
  "pg-most-write-kb")
    find_most_write_kb_pg
    ;;
  "pg-less-write-kb")
    find_less_write_kb_pg
    ;;
  "rbd-prefix")
    get_rbd_prefix $1 $2
    ;;
  "rbd-count")
    count_rbd_object $1 $2
    ;;
  "rbd-host")
    find_prim_host_from_rbd $1 $2
    ;;
  *)
    echoerr "Unknown command : $1"
    help
    exit 1
    ;;
esac

#find_host_from_pg 0.1c

#find_host_from_object rb.0.376d.2ae8944a.000000000016

#find_pg $(ceph osd map rbd rb.0.376d.2ae8944a.000000000016 --format json | jq -cr .pgid)


#find_prim_pg_from_osd 1

#find_all_pg_from_osd 1

#get_rbd_prefix rbd myrbd

#count_rbd_object rbd myrbd

#find_prim_host_from_rbd rbd myrbd

#find_less_write_kb_pg

#find_most_write_kb_pg